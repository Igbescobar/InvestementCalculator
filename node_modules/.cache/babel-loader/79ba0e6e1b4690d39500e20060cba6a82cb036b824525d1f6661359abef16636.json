{"ast":null,"code":"var _jsxFileName = \"/Users/ignaciogonzalez-bueno/Documents/adventureTime/Udemy/First Project/01-starting-project/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport InvestmentCalculator from './components/InvestmentCalculator';\nimport Results from './components/Results';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState(null);\n  const [results, setResults] = useState([]);\n  const calculateHandler = userInput => {\n    setInput(userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['currentSavings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearlySavings']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expectedInterest'] / 100;\n    const duration = +userInput['investmentDuration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setResults(yearlyData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InvestmentCalculator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      onCalculateHandler: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), results.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"No results calculated yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 32\n    }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(Results, {\n      results: results,\n      input: input.currentSavings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oxa7Q7jPCyjvUPpieJ5ZgtzndX4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","InputForm","InvestmentCalculator","Results","jsxDEV","_jsxDEV","App","_s","input","setInput","results","setResults","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculateHandler","length","style","textAlign","_c","$RefreshReg$"],"sources":["/Users/ignaciogonzalez-bueno/Documents/adventureTime/Udemy/First Project/01-starting-project/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport InvestmentCalculator from './components/InvestmentCalculator';\nimport Results from './components/Results';\n\nfunction App() {\n\n  const [input, setInput] = useState(null)\n\n  const [results, setResults] = useState([])\n\n  const calculateHandler = (userInput) => {\n    setInput(userInput)\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['currentSavings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearlySavings']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expectedInterest'] / 100;\n    const duration = +userInput['investmentDuration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    setResults(yearlyData)\n  };\n\n  return (\n    <div>\n      <InvestmentCalculator />\n      <InputForm onCalculateHandler={calculateHandler} />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      {results.length === 0 && <p style={{ textAlign: 'center' }}>No results calculated yet.</p>}\n      {results.length > 0 && <Results results={results} input={input.currentSavings} />}\n\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,oBAAoB,MAAM,mCAAmC;AACpE,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMY,gBAAgB,GAAIC,SAAS,IAAK;IACtCJ,QAAQ,CAACI,SAAS,CAAC;IACnB;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACnD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;IACxD,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,kBAAkB,CAAC,GAAG,GAAG;IAC3D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,oBAAoB,CAAC;;IAEjD;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAL,UAAU,CAACG,UAAU,CAAC;EACxB,CAAC;EAED,oBACET,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACH,oBAAoB;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxBvB,OAAA,CAACJ,SAAS;MAAC4B,kBAAkB,EAAEjB;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAIlDlB,OAAO,CAACoB,MAAM,KAAK,CAAC,iBAAIzB,OAAA;MAAG0B,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAR,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACzFlB,OAAO,CAACoB,MAAM,GAAG,CAAC,iBAAIzB,OAAA,CAACF,OAAO;MAACO,OAAO,EAAEA,OAAQ;MAACF,KAAK,EAAEA,KAAK,CAACO;IAAe;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAG9E,CAAC;AAEV;AAACrB,EAAA,CA9CQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}